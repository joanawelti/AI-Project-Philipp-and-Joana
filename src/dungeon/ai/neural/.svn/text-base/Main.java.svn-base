package dungeon.ai.neural;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.*;
import java.awt.geom.*;
import javax.swing.*;

import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 * class currently holds the XOR problem
 * and is used for testing
 *
 * credit to heaton research for nn tutorial
 *
 * @author john alexander
 */
public class Main extends JPanel {
    final int PAD = 20;
    public static Graphics2D g2;
	static Network nn;
	
	//IDEAL is the output we want from the network
	//it is two dimensional, but we only use the first dimension
	static double IDEAL[][]      = {
		{0},{  0},{  0},{  0},{0},{0},{0},{1},{1},{1},
		{0},{  0},{  0},{  0},{0},{0},{0},{0},{0},{0},
		{0},{  1},{  1},{  1},{1},{0},{0},{0},{0},{0},
		{1},{  1},{  1},{  1},{1},{1},{0},{0},{0},{0},
		{1},{  1},{ -1},{  1},{1},{1},{0},{0},{0},{0},
		{0},{  1},{  1},{  1},{0},{0},{0},{0},{0},{0},
		{0},{  1},{  1},{  1},{1},{0},{0},{0},{0},{0},
		{0},{  0},{  0},{  0},{0},{1},{0},{0},{0},{0},
		{0},{  0},{  0},{  0},{0},{0},{1},{0},{0},{0},
		{0},{  0},{  0},{  0},{0},{0},{0},{0},{0},{0}
		};
;
	static boolean nnReady=false;
	static int size=0;
	static int horizSize;
	static int gapSize;
	static float[] values;

	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		g2 = (Graphics2D) g;
		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
				RenderingHints.VALUE_ANTIALIAS_ON);

		//draw little boxes to show the training values
		if (nnReady) {
			int index = 0;
			float v;
			int boxsize=5;
			for (int y = 0; y < horizSize; y++) {
				for (int x = 0; x < horizSize; x++) {
					v = values[index];
					g2.setPaint(new Color(v, v, v, 1));
					g2.fill(new Rectangle2D.Double(x * boxsize, y * boxsize, boxsize, boxsize));
					index++;
				}
			}
			
			index = 0;
			int newgapSize=(gapSize*boxsize);
//	    	System.out.println(gapSize);
			boxsize=3;
			for (int y = 0; y < 10; y++) {
				for (int x = 0; x < 10; x++) {
					if(Math.abs(IDEAL[index][0])<0.01)
					g2.setPaint(Color.blue);
					else if(Math.abs(IDEAL[index][0]-1)<0.01)
					g2.setPaint(Color.red);
					else g2.setPaint(Color.yellow);
					
					g2.fill(new Rectangle2D.Double(x * newgapSize, y * newgapSize, boxsize, boxsize));
					index++;
				}
			}
			
			
		}
	}

		
		
    public static void main(String[] args) {
    	
    	//put the input data into the INPUT array
		double INPUT[][]=new double[100][2];
		int index = 0;
		for (int y = 0; y < 10; y++)
			for (int x = 0; x < 10; x++) {
				INPUT[index][0] = x;
				INPUT[index][1] = y;
				index++;
			}

//		take out the -1 values
        for(index=0;index<100;index++)
        	if(Math.abs(IDEAL[index][0]+1)<0.01)
        	{INPUT[index][0] = 20;
			INPUT[index][1] = 20;
			IDEAL[index][0]=0.5;}
        
        // create the network ( inputs, outputs, activationfunc)
        Network nn = new Network(2,1,ActivationFunction.SIGMODIAL);
        nn.addHiddenLayer(4);
        nn.addHiddenLayer(4);
        nn.finalizeNetwork();
        
        int epoch = 0;
        
        nn.setTrainingData(INPUT, IDEAL);
        
        long startTime = System.currentTimeMillis();
        while ((epoch < 5000) && (nn.getError() > 0.001)) {
            
        	//this line actually does the training (1 iteration)
            nn.iteration();
            
            if (epoch % 10 == 0)
                System.out.println("Epoch: " + epoch + " Error: " + nn.getError());
            
            epoch++;
        }
        long endTime = System.currentTimeMillis();
        
        System.out.println("Epoch: " + epoch + " Error: " + nn.getError());
        

        System.out.println("Time taken: " + (endTime - startTime) + " millis");
        
        //Calculate values for drawing
        //this draws the 2D image showing what the network output is for all inputs across the two dimensions
        index=0;
    	double increment=0.1;
    	horizSize=(int)Math.ceil(10/increment)+1;
    	gapSize=(int)Math.ceil(1/increment);
//    	System.out.println(gapSize);
    	size=horizSize*horizSize;
    	values=new float[size];
		for (double y = 0; y < 10; y+=increment) {
			for (double x = 0; x < 10; x+=increment) {
				//computeOutputs is the method that queries the network to see what output it gives
				//we always use the [0] part of the returned array
				float v = (float) nn.computeOutputs(new double[] { x, y })[0];
				values[index]=v;
				index++;
//				System.out.println(v);
			}
		}
    	nnReady=true;
    	
    	//prepare the graphical display
        JFrame f = new JFrame();
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.add(new Main());
        f.setSize(800,800);
        f.setLocation(00,00);
        f.setVisible(true);

        
        //exampleXOR();
        


	}
    
    	
    	
    

//	private static void exampleXOR() {
//		double XOR_INPUT[][] = { { 0.0, 0.0 }, { 1.0, 0.0 }, { 0.0, 1.0 }, { 1.0, 1.0 } };
//
//        double XOR_IDEAL[][] = { { 0.0 }, { 1.0 }, { 1.0 }, { 0.0 } };
//
//        Network nn = new Network(2,1,ActivationFunction.HYPERBOLIC_TANGENT);
//        nn.addHiddenLayer(3);
//        nn.finalizeNetwork();
//        
//        int epoch = 0;
//        
//        nn.setTrainingData(XOR_INPUT, XOR_IDEAL);
//        
////        System.out.println("Epoch: " + epoch + " Error: " + nn.getError());
//        
//        
//
//        long startTime = System.currentTimeMillis();
//        while ((epoch < 5000) && (nn.getError() > 0.001)) {
//            
//            nn.iteration();
//            
////            if (epoch % 10 == 0)
////                System.out.println("Epoch: " + epoch + " Error: " + nn.getError());
//            
//            epoch++;
//        }
//        long endTime = System.currentTimeMillis();
//        
//        System.out.println("Epoch: " + epoch + " Error: " + nn.getError());
//        
//        int i = 0;
//        
//        for (double[] input : XOR_INPUT) {
//            double[] output = nn.computeOutputs(input);
//            System.out.println("\nInput: " + input[0] + ", " + input[1] + "\nActual: " + output[0] + "\nIdeal: " + XOR_IDEAL[i++][0] + "\n");
//        }
//
//        System.out.println("Time taken: " + (endTime - startTime) + " millis");
//	}
    
}
