\documentclass[a4paper,10pt]{scrartcl}
\usepackage[UKenglish]{babel}
\usepackage[utf8x]{inputenc}
\usepackage{hyperref}
\usepackage{graphicx}
\usepackage{listings}
%\usepackage{eso-pic}

%opening
\title{Report for Assessment 1 \\ \large{for CS3015 Project Group D}}
\author{
  Matteo Franchini, Christofer Hadjigeorgiou, \\
  Jake Henderson-Palmer, Thomas Jones,  \\
  Philipp Lucas, Dijana Vilic}

\begin{document}

\maketitle
\newpage

\section*{Acknowledgements}
\newpage

\tableofcontents

\newpage

\section{Introduction}
\subsection{Overview of project}
The main focus of this project was to create and develop a platform where users can use a mobile application to find places of interest that are near where they are. There are two main concepts – The first is assuming that the person is a tourist who is unaware of the attractions and venues that are available around them. The application serves as an intelligent tourist guide on places to go based on how they have previously used the application. A user model is gradually built around each user and allows the system to recommend relevant places of interest accurately. The second concept is for users who live in that area and just wish to use the application get access to exclusive vouchers, coupons and reviews on places in their area before visiting. This tool will allow the user to make educated decisions based on previous user experiences.
Our target market will be primarily tourists who wish to use the application to guide them through the city that they are in. The application is not targeted at a specific age group and so we would hope that because of our focus on having user friendly interfaces, that the application can be used by everyone with a mobile device!

\subsection{Summary of Team Organisation}
The team (team Delta) was formed on and comprised of initially seven members: Jake Henderson-Palmer, Tom Jones, Philipp, Christofer Hadjigeorgiou, Matteo Franchini, Dijiana Vilic and Pawel Lasek. Unfortunately one of the team members was unable to continue studying for personal reasons (Pawel Lasek), which brought our team down to six.
The tasks were split between members based on what areas they were best suited to. Below is a hierarchical Structure detailing how our team was structured for the second phase of our software engineering project. \\
\includegraphics[width=0.9\textwidth, origin=loc\c]{teamstructure.png}
\subsection {Project Management Strategy}
We set up an SVN for members of the team to submit up-to-date versions of the areas they were developing. This allows all members of the team to view each other’s progress and gives a good overall picture of how quickly the project was moving in terms of overall development.
For the duration of this project we had meetings once per week, this number was increased to two a week in the weeks approaching the deadline. Tasks were given to the members of the team as deemed necessary, ensuring that everyone was working on something.
The whole system was completed two weeks after the holidays. Test plans and a test strategy were written up during the holidays so the team were prepared to begin testing as soon as development had been completed.

\section{Requirements}
% Summary of requirements analysis phase (procedures followed, etc.), current system characterisation, functional and non-functional requirements for proposed system, feasibility study. You should base this chapter on your earlier requirements specification summary.

\subsection{Old Functional Requirements}
\begin{itemize}
\item User has the ability to setup an account.
\item User can login to his\textbackslash her account with their  username \& password.
\item User can either use a web-based interface or a android application. Both provide full functionality.
\item User can manually enter location, scan QR code or pinpoint their location through GPS.
\item User can scan QR code that is outside the place and will be presented with  information/coupons etc. on that outlet.
\item User can get recommendations for places based on his previously visited places, on peoples preferences with similar interests and on advertisement contract made with places. 
\item System can track user activity and visited places. 
\item User can report the location if it is incorrect/breaks terms of service etc...
\item User can rate the place he/she has visited (out of 5) and can write a review.
\item A companies has the ability to submit a request (providing essential information that fits the BoredIn webpage template) to participate (on the website). After consideration, it will be either refused or accepted. If accepted a QR code  will be issued. 
\item A company has the ability to add/edit/remove coupons from his/her BoredIn webpage.
\item A company can  sign a advertisement contract to improve its visibility to BoredIn users.
\end{itemize}


\subsection{Old Non-Functional Requirements}
\begin{itemize}
\item Usability - The interface must be user-friendly and easy to navigate through
on an Android device and on the Web interface.
\item Stability - The software must be stable and free from bugs or possible system
hanging.
\item Price - The application must be free to download.
\item Platform - The application must run on the android platform.
\item Modifiability - You must be able to add/remove companies and users from the
service with ease and modify ranking of paying businesses.
\item Availability - Application must be available to download on all android 
devices within the UK, the service must also be available 24/7.
\end{itemize}

\subsection{Modifications }
\subsubsection{Withdrawn Requirements ???}
\begin{itemize}
 \item User can scan QR code.
 \item A company has the ability to add/edit/remove coupons from his/her BoredIn webpage.
 \item A company can  sign a advertisement contract to improve its visibility to BoredIn users.
\end{itemize}

\subsubsection{Additional Requirements}
\begin{itemize}
 \item User has the ability to change its account information.
 \item User has the ability to view its account information.
 \item Administrator can add\textbackslash modify\textbackslash delete places
 \item Administrator can add\textbackslash modify\textbackslash delete categories
\end{itemize}

\subsection{Quality Attributes}
\subsubsection{availability}
The application will not be restricted to iPhone users as there is also a web application that can be used by all users, with any modern mobile device. The application will be available to anyone who has registered an account and has downloaded the application.
\subsubsection{Maintainability}
All coding will be well documented, thus allowing programmers to make changes to the coding should it be necessary.
\subsubsection{Learnability}
Both the web and mobile application will be very similar, with the same amount of options and will require a very small amount of learning to be able to use all of the features available. A user guide will be available to users who wish to use the system.

\subsection{Feasability Study}
PHP
\begin{itemize}
 \item Standard scripting language for Web development. Versatile, with built– in support for database access.
 \item New releases may not support functions native to older versions of PHP.
 \item Freely available online.
 \item Limited team experience
\end{itemize}

HTML
\begin{itemize}
 \item Standard language for Web development. Universal, recognised by all browsers available.
 \item Older browsers may be incompatible with graphical elements.
 \item Generally limited experience with HTML/XHTML.
\end{itemize}

JAVASCRIPT
\begin{itemize}
 \item A prototype-based object-orientated scripting language that is dynamic and used in the client-side decisions.
 \item Older mobile devices may not support JavaScript in there browser.
 \item Very limited team experience with JavaScript.
\end{itemize}

\subsection{Strengths, Weaknesses, Costs and Team Domain Experience}
\subsubsection{Team}
The team consists of six Junior Honours Undergraduate Students. Each team member was different and had different skills in different areas and few common experiences. Based on previous projects we were aware that it was likely that the team may break apart due to members being ill or leave the university. We set tasks for each team member and “overflow” tasks should that person be unable to attend. 
\subsubsection{Organisation}
The structure may seem very well defined – this not the case. We worked on a very fluid model whereby we allocated each individual an area that they feel strongest in and they are given the leadership role for that area. Any problems that they face are presented to the entire team for advice and evaluation.
subsubsection{Competition}
The main competitors in the area of mobile recommendation in relation to place are Facebook places and Google Favourite Places, each offering similar services.  Facebook places allows the user to check-in to area’s – this is very close to what we are developing, the application we are developing differs as it offers directions to places that you are not currently at and offers you discount codes. Similarly with Google Favourite Places, however this is currently unavailable in the UK.

\subsection{Risk Analysis}
\subsubsection{General Risk}
This type of task is new to all of us. As we are inexperienced in dealing with projects of the nature it is likely that there will be increased pressure to complete tasks when deadlines are approaching. Some of the members in the team are not familiar with many programming languages and technologies as others, with appropriate management we can ensure that everyone is working with the strengths that they have. Time management is crucial in a project of this size – many of the members have commitments outside the group and this will definitely be a factor as to whether we meet project deadlines or not.

\subsection{Additional Requirements}
A real benefit of our systems is that are very few additional requirements. Of course, for the iOS application it would be necessary to have an iphone, iPad or iPod Touch.
The web interface, when used with a mobile device, works to its full potential when the mobile device has 3GS as it uses this to detect the users current location.


\section{Design}
% Overview of design, key component designs, data organisation, file/database structure, user-interface design, requirements cross-reference, summary of any modifications made to design during later stages of project. You should base this chapter on your earlier design summary.
\subsection{Overview}
We had a discussion on what would be the best options for the overall design. After a few discussions we came to the decision that it would be best to develop both an iPhone application and a web interface to stretch the number of people that are able to use the application. 
\subsubsection{User Interface Design}
The application will comprise of two different interfaces – one for all mobile devices that can be accessed via a website and an iPhone application that can only be used exclusively for users with an apple product. The overall layout of each application will be similar so that users of the iPhone application will not be confused by the web application layout and vice versa.
\subsubsection{Web Interface}
This will give the user the option to create an account, login to an existing account or request a password if they have forgotten it (Sent via email). Once the user has successfully logged they will be presented with a menu of different category of places e.g. Shopping, Attractions etc. Once the user has selected a category the server will return a set of plotted points on the map based on their current location and previously places they have visited. When the user selects a place that they wish to visit they will be given further information about that place, directions from where they are, vouchers and reviews.
% I WILL EXPAND THIS AND PLACE SCREENSHOTS OF THE WEB APPLICATION WHEN THE INTERFACE IS FULLY COMPLETED.


\subsection{General Architecture of the BoredIn System}

The general architecture of the BoredIn system is shown in \autoref{fig_System_Architecture}. 

\begin{figure}
\begin{center}
\includegraphics[width=0.9\textwidth]{System_Architecture.png}
\end{center}
\caption{BoredIn Architecture Overview}
\label{fig_System_Architecture}
\end{figure}

\begin{itemize}
 \item The first layer, the user interface, is provided as a web interface that can be accessed through any device that can access the Internet and as a application for iOS-based devices as well as for Android-based devices. The user interface acts as ‘glue’ between the user and the processing layer by providing a way for the user to input their preferences. It then forwards the input to our server, receives a response and updates the presentation for the user according to the servers response.\par 
 \item The second layer, the centralised processing layer, is the main part of our software. It provides a uniform RESTful and ROA-conform web interface. A Reslet based request handler distributes calls from client to the appropriate subsystem - either the administration system or the recommendation system. \par
%  Using a central web service will allow us to make our system safe, reliable and easily maintainable, since there will be no data stored on the user’s device but all on our own servers. It will allow the application to run at maximum speed, as no data needs to be transferred from remote user devices apart from the bare communication, which will also help us to ensure low Internet usage cost for our customers. Moreover we thereby minimise code bloat and possible errors. It is also an open design, since strictly defined interfaces allow easy integration of clients for other mobile platforms or further functional extensions. \par
 \item The third layer, the storage layer, currently uses a MySQL DBMS. It is connected to the processing layer by a uniform API. 
\end{itemize}

\subsection{Design Decisions and Modifications to Design}
\minisec{Change to iOS as primary platform}

%\minisec{REST and ROA-conform architecture}
\minisec{Resource Oriented Architecture}
BoredIn implements a Resource Oriented Architecture (ROA), and thereby follows the guideline of REST (Representational State Transfer). We decided to do so as it provides a number of advantages:
\begin{itemize}
 \item Better scalability, expendability and security as it enforces 
 \item Easy development of web mashups which help us to propagate (TODO:is that a good word for it...?) our system, as it enforces a uniform inferface and self-descriptive messages 
 \item Reduced costs as it allows independent development and deployment of individual components and enforces a layered system
 \item Higher reliabilty as the system is stateless 
\end{itemize}

\minisec{Using the Restlet Framework}
Restlet is a lightweight RESTful web framework for Java. We chose it as it considerably simplifies and accelerates the development of the server application. Since we need to write less code ourself our system is also more efficient and reliable. In addition the underlying architecture of the RESTlet framework is object orientated and thereby provides a more natural way to develop object orientated web services as ours.

\minisec{XML as standard for data exchange}
We use XML for data exchange between BoredIn clients and server as it emerged as the quase-standard in web development. It emphasizes simplicity, generality and usability over the internet. This decision is also part of our effort to develop a system that can easily be integrated in web mashups. \par

\minisec{Uniform Database API}
We use a uniform database API inf order to minimise the coupeling between the layers. That especially allows improved maintenance and to switch easily between different DBMS's if it should become necessary. \par
What else here?

\minisec{MySQL DBMS instead of PostGreSQL}
Why?

\minisec{What else\dots?}

\subsection{Server Design}
% Fully document what you have done and submit this to  me by 31 March 2011. Any diagrams, you can draw them in paint and I will draw them in photoshop.

\subsubsection{The Restlet Framework}
The Restlet framework provides so called restlets. They are the basic objects to deal with a HTTP request. When a restlet based server receives an incoming HTTP request a new instance of the root restlet of that server is created to process this request. However, since all restlets share the same uniform interface it is possible to arbitrarily connect them using specialised restlets called connectors. This and the huge number of other specialised restlets allow a clean, efficient, object-oriented design. \par

%\subsubsection{RESTful and ROA-conform API and Restlet Request Manager}
\subsubsection{Restlet Request Manager}
\minisec{Restlet Request Manager}
The restlet request manager is crucial for a good scaling behaviour and easy extensibility of the system. As all restlets share the same uniform interface they can be developed and tested independently. After this is completed plugging in a new reslet (for either some new functionality or load distribution or anything we could possibly to with restlets) is just one line of code and restarting the (stateless) server application.

\subsubsection{Restlet structure of Server}
For the server application the structure of the restlets is shown in \autoref{fig_Server_restlet_structure}. It also outlines the path that a HTTP request made by a client makes through the server.

\begin{figure}
\begin{center}
\includegraphics[width=0.9\textwidth]{Server_restlet_structure.png}
\end{center}
\caption{Restlet Structure of BoredIn Server}
\label{fig_Server_restlet_structure}
\end{figure}

Every request is first forwarded to the filter restlet. This restlet will test the request for its validity. If it is not valid, for example because the sent XML document doesn't conform with the XML schema, it is withdrawn and an appropriate HTTP error code is returned. If it is instead valid the filter restlet forwards the request to the appropriate restlet depending on the base URI of the request. This restlet will then do the actual processing. \par

\subsubsection{Resources}
As mentioned earlier the server is RESTful and has a ROA. We therefore have resources (i.e. services or data that are provided by the server), universal resource identifier (URI's) (i.e. sequences of characters to identify a resource) and representations (i.e. specific encodings of a resource). \par

\autoref{table_resources} explains the resources, its URI's and the corresponding set of (shortened) functional requirements. \par

\begin{table}
\begin{center}
\begin{tabular}{llp{7cm}}
\textbf{Resource} 	& \textbf{URI} 				& \textbf{functional requirements} \\ \hline
Login			& \url{api_root/login/} 		& User can login to account with their username \& password.\\ \hline
Account 		& \url{api_root/account/} 		& User has the ability to setup an account. \\ \hline
QR 			& \url{api_root/qr/} 			& User can scan QR code that is outside the place and will be presented with  information/coupons etc. on that outlet.\\ \hline
Recommendation 		& \url{api_root/recommendation/} 	& User can get recommendations for places based on his previously visited places, on peoples preferences with similar interests and on advertisement contract made with places.\\ \hline
Report 			& \url{api_root/report/} 		& User can report the location if it is incorrect/breaks terms of service etc\dots \\ \hline
Review 			& \url{api_root/review/} 		& User can rate the place he/she has visited (out of 5) and can write a review. \\ \hline
Business 		& \url{api_root/business} 		& A companies has the ability to submit a request to participate in the system. \\ \hline
Voucher 		& \url{api_root/voucher/} 		& A company has the ability to add/edit/remove vouchers from his/her BoredIn webpage.\\ \hline
Category 		& \url{api_root/category/} 		& x\\ \hline
Place 			& \url{api_root/place/} 		& ×
\end{tabular}
\end{center}
\caption{Resources, its URI's and the corresponding requirements}
\label{table_resources}
\end{table}

\subsubsection{Data Structures}
In the world of Restlet it requires among others three things to implement a resource: 
\begin{enumerate}
 \item A resource interface that defines the methods that the resource is able to handle.
 \item An actual implementation of that interface (which extends an abstract Restlet resource class).
 \item The underlying data which the implemented resource works on.
\end{enumerate}
For the server application it holds that if the data are instances of a class \textit{X.java} then the resource is named \textit{XResource.java} and the implementation of it is named \textit{XResourceImpl.java}.\par

TODO: Should I put a table of all resource interfaces, implementations and underlying data classes?

\subsubsection{Representations and XML}
When a client requests a resource using its URI it does not receives the resource itself but a representation of it. Our system utilises XML documents for this. In order to ensure validity of XML documents exchanged between clients and server a XML schema was developed. This XML schema defines a number of XML elements which are allowed. Please refer to \autoref{listing_XMLSchema} in \autoref{section_XMLSchema} for the XML schema in use. \par

As each resource has one (or more) underlying data classes, a representation of this resource is just a XML representation of the current states of an instance of these data classes. \autoref{tabular_resourcesToXML} shows the mapping of resources and its data classes to XML elements (depending on the requested method). Resources and HTTP methods that do not imply a XML representation (e.g. because they only return a HTTP status code) are omitted.

\begin{table}
\begin{center}
\begin{tabular}{llll}
 \textbf{Resource} 	& \textbf{Data Classes} 	& \textbf{HTTP Method}	& \textbf{XML Elements}  \\ \hline
 Account 		& Account.java 			& GET			& accountType \\ 
			&  				& POST			& accountType \\ 
			&  				& PUT			& accountType \\ \hline
 QR 			& 		 		& 			& TODO \\ \hline
 Recommendation 	& RecAnswer.java  		& GET 			& recAnswerType \\ \hline
 Report 		& Report.java 			& 			& report\_placeType \\ \hline
 Review 		& Review.java			& 			& review\_placeType \\ \hline
 Business 		& none				& 			& business\_applyType \\ \hline
 Voucher 		& Voucher.java 			& 			& voucherType \\ \hline
 Category 		& Category.java 		& 			& categoryType \\ \hline
 Place 			& Place.java			& 			&
\end{tabular}
\end{center}
\caption{Mapping of Resources to XML elements}
\label{tabular_resourcesToXML}
\end{table}

Most of the data classes need to be able to represent its current state as XML as they are directly or indirectly part of a resource. Therefore they all implement a common interface \textit{XMLConvertable.java} which requires a method \textit{String toXML()}. 

\section{Coding \& Integration}
% Planning for coding & integration of system components, key implementation decisions, libraries used, use of existing software, algorithms, etc. We do not expect to see large amounts of code in the report; small code fragments may be used to illustrate major decisions, etc.

\subsection{Overview Used Software and Libraries}
\begin{itemize}
 \item Restlet Framework 2.0.5.0
 \item mysql java connector 5.1.15
\end{itemize}


\subsection{Overview Used Software Tools etc.}
\begin{itemize}
 \item XMLBuddy 2.0.72 plugin for Eclipse
 \item Subclipse 1.6.17 plugin for Eclipse
\end{itemize}

\section{Testing}
% Testing strategy, description of test data, use of test harness code, test results.

\section{Summary}
% Discussion of outcome of project, if original client requirements were not satisfied - explanation of why, possible future changes/additions to the system, lessons learnt.

\section{Appendix}
\subsection{ Appendix 1 - User Manual}
% Introductory material on how to run the system.
\subsection{Appendix 2 - Maintenance Manual}
% Description of how to install and compile system, hardware/software dependencies (including libraries), list of source code files (with brief summary of role in system), etc.
\subsection{Additional appendices}
% such as: copy of material from current system, etc.
\subsubsection{XML Schema}
\label{section_XMLSchema}

\lstset{language=XML,caption={XML Schema for BoredIn},label=listing_XMLSchema}
\lstinputlisting{../../BoredInServer/src/xml/xml_schema.xsd}

\section{Resources}
\begin{itemize}
 \item Book ``RESTful Web Services``
\end{itemize}


\end{document}